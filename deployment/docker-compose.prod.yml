# Production Docker Compose configuration
# Level 2 + Level 3: Gunicorn with background task workers
#
# Usage:
#   docker-compose -f deployment/docker-compose.prod.yml up -d
#
# Features:
# - Multi-worker API service with Gunicorn
# - Background task workers (RQ)
# - Redis for caching and task queue
# - PostgreSQL database
# - Health checks and auto-restart
# - Production-ready logging

version: '3.8'

services:
  # API service with Gunicorn (Level 2)
  api:
    build:
      context: ..
      dockerfile: Dockerfile
    image: fastapi-backend:latest
    container_name: fastapi-api
    command: gunicorn app.main:create_app --factory -c gunicorn.conf.py
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      # Application
      - APP_ENVIRONMENT=production
      - APP_DEBUG=false
      - APP_LOG_FORMAT=json
      - APP_LOG_LEVEL=INFO

      # Database
      - APP_DATABASE_URL=postgresql+asyncpg://postgres:${DB_PASSWORD}@db:5432/fastapi_prod
      - APP_DATABASE_POOL_SIZE=10

      # Security
      - SECURITY_JWT_SECRET=${JWT_SECRET}
      - SECURITY_ENABLE_HSTS=true
      - SECURITY_RATE_LIMIT_ENABLED=true

      # Redis
      - SECURITY_REDIS_ENABLED=true
      - SECURITY_REDIS_URL=redis://redis:6379/0

      # Scaling (Level 2)
      - WORKERS=4
      - WORKER_TIMEOUT=60
      - MAX_REQUESTS=1000

      # Background tasks (Level 3)
      - ENABLE_BACKGROUND_TASKS=true
      - TASK_BROKER_URL=redis://redis:6379/1
      - TASK_RESULT_BACKEND=redis://redis:6379/2

    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

    networks:
      - backend

    volumes:
      - api-logs:/var/log/app

  # Background task workers (Level 3)
  worker:
    image: fastapi-backend:latest
    command: rq worker default high priority --url redis://redis:6379/1
    restart: unless-stopped
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

    environment:
      - APP_ENVIRONMENT=production
      - APP_LOG_FORMAT=json
      - APP_LOG_LEVEL=INFO
      - TASK_BROKER_URL=redis://redis:6379/1
      - TASK_RESULT_BACKEND=redis://redis:6379/2
      - APP_DATABASE_URL=postgresql+asyncpg://postgres:${DB_PASSWORD}@db:5432/fastapi_prod

    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy

    networks:
      - backend

  # RQ Dashboard (optional monitoring)
  rq-dashboard:
    image: eoranged/rq-dashboard
    container_name: rq-dashboard
    restart: unless-stopped
    ports:
      - "9181:9181"
    environment:
      - RQ_DASHBOARD_REDIS_URL=redis://redis:6379/1
    depends_on:
      - redis
    networks:
      - backend

  # Redis (caching + task queue)
  redis:
    image: redis:7-alpine
    container_name: fastapi-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - backend

  # PostgreSQL database
  db:
    image: postgres:15-alpine
    container_name: fastapi-db
    restart: unless-stopped
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=fastapi_prod
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql  # Optional init script
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

  # Nginx load balancer (optional, for Level 4)
  # Uncomment if you want nginx in front of the API service
  # nginx:
  #   image: nginx:alpine
  #   container_name: fastapi-nginx
  #   restart: unless-stopped
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf:ro
  #     - nginx-logs:/var/log/nginx
  #   depends_on:
  #     - api
  #   networks:
  #     - backend

networks:
  backend:
    driver: bridge

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  api-logs:
    driver: local
  # nginx-logs:
  #   driver: local

# Secrets (use Docker secrets in production)
# secrets:
#   jwt_secret:
#     external: true
#   db_password:
#     external: true
