# Nginx configuration for FastAPI backend (Level 4: Horizontal Scaling)
#
# This configuration provides:
# - Load balancing across multiple backend nodes
# - Health checks and automatic failover
# - Connection pooling and keepalive
# - Request buffering and timeouts
# - Security headers and rate limiting
#
# Usage:
#   1. Copy to /etc/nginx/conf.d/fastapi-backend.conf
#   2. Update upstream server addresses
#   3. Update server_name with your domain
#   4. Test: nginx -t
#   5. Reload: systemctl reload nginx

# Upstream backend servers
# Use 'least_conn' for better distribution with async applications
upstream fastapi_backend {
    least_conn;  # Best for async apps (better than round_robin or ip_hash)

    # Backend nodes (update with your actual node addresses)
    server backend-node1:8000 max_fails=3 fail_timeout=30s;
    server backend-node2:8000 max_fails=3 fail_timeout=30s;
    server backend-node3:8000 max_fails=3 fail_timeout=30s;

    # Keep connections alive between nginx and backends
    keepalive 64;
}

# Rate limiting zones
# Limit requests per IP address
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=100r/s;
limit_req_zone $binary_remote_addr zone=burst_limit:10m rate=10r/s;

# Connection limiting
limit_conn_zone $binary_remote_addr zone=conn_limit:10m;

# Main server block
server {
    listen 80;
    listen [::]:80;

    # Update with your domain
    server_name api.example.com;

    # Redirect HTTP to HTTPS in production
    # Uncomment after SSL setup:
    # return 301 https://$server_name$request_uri;
# }

# HTTPS server block (uncomment and configure after SSL setup)
# server {
#     listen 443 ssl http2;
#     listen [::]:443 ssl http2;
#     server_name api.example.com;

    # SSL certificates (Let's Encrypt recommended)
#     ssl_certificate /etc/letsencrypt/live/api.example.com/fullchain.pem;
#     ssl_certificate_key /etc/letsencrypt/live/api.example.com/privkey.pem;

    # SSL configuration (Mozilla Intermediate)
#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384';
#     ssl_prefer_server_ciphers on;
#     ssl_session_cache shared:SSL:10m;
#     ssl_session_timeout 10m;

    # Security headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    add_header X-Frame-Options "DENY" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    # Remove server header (hide nginx version)
    server_tokens off;

    # Client body size limits
    client_max_body_size 50M;
    client_body_buffer_size 128k;

    # Timeouts (adjust for long-running operations like LLM calls)
    proxy_connect_timeout 60s;
    proxy_send_timeout 90s;
    proxy_read_timeout 90s;
    send_timeout 90s;

    # Buffer settings
    proxy_buffering on;
    proxy_buffer_size 4k;
    proxy_buffers 8 4k;
    proxy_busy_buffers_size 8k;

    # Logging
    access_log /var/log/nginx/fastapi-backend-access.log;
    error_log /var/log/nginx/fastapi-backend-error.log warn;

    # Health check endpoint (no rate limiting)
    location /api/v1/health {
        proxy_pass http://fastapi_backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # No caching for health checks
        proxy_cache_bypass 1;
        proxy_no_cache 1;

        # Quick timeout for health checks
        proxy_connect_timeout 5s;
        proxy_send_timeout 5s;
        proxy_read_timeout 5s;

        # Access log for health checks (optional, can be noisy)
        access_log off;
    }

    # Readiness check (used by load balancers)
    location /api/v1/health/ready {
        proxy_pass http://fastapi_backend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        proxy_connect_timeout 5s;
        proxy_read_timeout 10s;
        access_log off;
    }

    # API endpoints with rate limiting
    location /api/ {
        # Rate limiting: 100 req/s per IP, burst up to 200
        limit_req zone=api_limit burst=200 nodelay;

        # Connection limit: max 50 concurrent connections per IP
        limit_conn conn_limit 50;

        # Proxy to backend
        proxy_pass http://fastapi_backend;
        proxy_http_version 1.1;

        # WebSocket support (for streaming responses)
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        # Standard headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;

        # Keepalive to backend
        proxy_set_header Connection "";

        # Don't pass nginx error pages to client
        proxy_intercept_errors off;

        # Timeout for long-running operations (LLM API calls, etc.)
        proxy_connect_timeout 60s;
        proxy_send_timeout 90s;
        proxy_read_timeout 90s;
    }

    # Static files (if any)
    location /static/ {
        alias /var/www/fastapi-backend/static/;
        expires 1y;
        add_header Cache-Control "public, immutable";
    }

    # Metrics endpoint (restrict access)
    location /metrics {
        # Restrict to internal IPs only
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        deny all;

        proxy_pass http://fastapi_backend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
    }

    # Deny access to sensitive files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
}

# Status page for nginx monitoring (optional)
server {
    listen 8080;
    location /nginx_status {
        stub_status on;
        access_log off;
        allow 127.0.0.1;
        deny all;
    }
}
